knitr::opts_chunk$set(echo = TRUE)
library(tictoc)
model.fit$alpha_fit
model.fit$beta_fit
model.fit$sigma_fit
knitr::opts_chunk$set(echo = TRUE)
library(tictoc)
# Set coefficients
alpha.true = matrix(c(-0.5, 1, -0.25, 0.5, 0, 0), nrow = 3, byrow = T)
beta.true = matrix(c(1, 0.5, 0), nrow = 3, byrow = T)
sigma.true = c(1)
alpha.true
model.fit$alpha_fit
beta.true
model.fit$beta_fit
sigma.true
model.fit$sigma_fit
set.seed(1)
n=10000
g=3
P=2
X.Fixed = array(1,dim=c(n,P))
X.Fixed[,2]=rbinom(n,1,0.5)
t = as.factor(ceiling(seq(n)/100))
t1 = model.matrix(~t+0)
tl = list(t1)
w1 = rnorm(100, mean=0, sd=1)
wl = list(w1)
plot(model.fit$ww_fit[[1]], wl[[1]])
abline(a=0,b=1)
## Simulation 2: g=3, L=1 random effect
set.seed(1)
n=10000
g=3
P=2
X.Fixed = array(1,dim=c(n,P))
X.Fixed[,2]=rbinom(n,1,0.5)
t = as.factor(ceiling(seq(n)/100))
t1 = model.matrix(~t+0)
tl = list(t1)
w1 = rnorm(100, mean=0, sd=1)
wl = list(w1)
# Transform random effects to a matrix
w = ProduceW(tl, wl)
knitr::opts_chunk$set(echo = TRUE)
library(tictoc)
params = matrix(list( list(shape = 2,  scale = 1),
list(shape = 20, scale = 1.5),
list(shape = 12, scale = 1)),
nrow = 1, byrow = T)
params
print_expert_matrix(model.fit$model_fit)
